"""
Django settings for hydra project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-apkg6gq=7o@r7)=_-$n#egy+r-=bdbn2@bq341f_!#uw5name-"
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS_ENV = os.environ.get("DJANGO_ALLOWED_HOSTS")

ALLOWED_HOSTS = ALLOWED_HOSTS_ENV.split(" ") if ALLOWED_HOSTS_ENV else []
# In order to support metrics being scraped by Prometheus we need to allow the internal
# k8s network ip range to be allowed. This CIDR range is taken from the KOPS cluster config
ALLOWED_CIDR_NETS = ['100.64.0.0/10']
# SECRET_KEY = os.environ.get("SECRET_KEY")
#
# DEBUG = int(os.environ.get("DEBUG", default=0))
#
# # 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# # For example: 'DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]'
# ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")


# Application definition

INSTALLED_APPS = [
    "api.apps.ApiConfig",
    "hydra.jobmanager.signals_app.JobManagerSignalConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    # 'django_nose',
]

MIDDLEWARE = [
    "allow_cidr.middleware.AllowCIDRMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "hydra.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "hydra.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_NAME", "postgres"),
        "USER": os.environ.get("POSTGRES_USER", "postgres"),
        "HOST": os.environ.get("POSTGRES_HOST", "db"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", ""),
        "PORT": 5432,
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(PROJECT_ROOT, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'
# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "json"},
    },
    "formatters": {
        "json": {
            "()": "pythonjsonlogger.jsonlogger.JsonFormatter",
            "fmt": "%(levelname)s %(asctime) %(module)s %(message)s",
        }
    },
    "root": {
        "handlers": ["console"],
        "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
    },
}

# to add logging anywhere in the apps , do: logger = logging.getLogger(__name__)

# K8s specific variables mainly used by jobscheduler
K8S_API_URL = os.environ.get(
    "K8S_API_URL",
    "https://internal-api-mobilizedconstruction-61h349-1602665451.eu-west-2.elb.amazonaws.com",
)
K8S_CACERT = os.environ.get(
    "K8S_CACERT",
    "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMwekNDQWJ1Z0F3SUJBZ0lNRmdKSjMxaHBJZ3NKTGtUd01BMEdDU3FHU0liM0RRRUJDd1VBTUJVeEV6QVIKQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13SGhjTk1qQXdOREF4TVRBMU5EQXlXaGNOTXpBd05EQXhNVEExTkRBeQpXakFWTVJNd0VRWURWUVFERXdwcmRXSmxjbTVsZEdWek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQTRTUkt6UjhpVDcwbjZQREZocldIRFVIa29QS01TbWhaMFY3bC9JSC9PQVM0MzQrL1JoQ2gKNzU4a0lLaVA0WWc5Vys5WTVkcklmZldlcVlsT25ucllIeEdxZStXZkQ1M2tGcTd6ZllWNUJHOGZITHhkUFVmMgpsbHV0Wko4ZlNBMkhiZlZ4dlNkSm5Sd0dWbHVlQ3ZIdjQ4SExZY0EyWnVBSkkydHl3VDZhKzJrYlpvSFRhNnRLCnl5RHU4QXFSUEJVcCs1QklTaElVc0ZSUjBMSnJNdVlqZnhqOHdNWDM3Tm5vUlUrN1M3SVpkdGFlT0JHdlgwd2IKcVF5d1gzR3FYdXBoSkFQdllBbjZJR0VKNGJNU0dVcy9MbTQySVllUTRSMExZaVBEek80N1Z1c2NjOFZrYlpnTQo5K3RydnZmT1BBdGt5OVgzYTkvU1NzYjRqZWJrSFo5N0tRSURBUUFCb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DCkFRWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFRMUZxamc1MURIRzUKMnFpRmdta0FNT2NsYjdmNzJadllxZjgrbERKdEJWOW9DVXVJbU05WlFtcjRjVTltYjl5c0x1NGExNVQ1Z3FTSApITVg4aXNndFptSVE1NjVlOFF4ZlAyemx5cWRMSUloVFd6RGxvRitzcGkvYzR3c2k3OWNScnF3Um0wWTVOY1VECjYvWVVVY3BpbThNb09SaWNyTDVuaGRZTEdWbTJGNjRDbVlXb3dTWnpPckVCNkZNTC92bjg4NEtxWHc2bU44L2EKZEQvd2IvcmZqei81RUVPUXlhMExCSGQ1akVtZXdEOTkzaTl4UVJES2orT2VmcXlLUzlwTGRLbUJHT1Jrcnc1MwpSQmdOa1h2NXhVV1Y1VGtzcUJnRmhNSTc4SGM1U1JnbkJBb0hqRWlubVI1SkppWW5VeS8yd0JPc2JXNTZnVWUxCmxKOWtRL29qUVE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
)
K8S_TOKEN = os.environ.get(
    "K8S_TOKEN",
    "eyJhbGciOiJSUzI1NiIsImtpZCI6IkIxQjZhOUlMWEtTWkZPVGp1UGlaWHBnRXpxdGEwUEgyR0YzUVFVcjNaRkEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJwcm9jZXNzaW5nIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6Imh5ZHJhLXByb2Nlc3Npbmctc2EtdG9rZW4tenc4OXQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiaHlkcmEtcHJvY2Vzc2luZy1zYSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjY3ZGZlZWIxLTEwNzAtNDk5Mi04Y2M3LWMyZWVmMTExYzNiZSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpwcm9jZXNzaW5nOmh5ZHJhLXByb2Nlc3Npbmctc2EifQ.ikPsJCPp2WSQeeIziLgrkw2KpBl6ddFCTz3udW97azDWJjdMqYy02FoLL_bFBuuk3pTDeJj-vnl-6AFdjLN6OOLC6uMQFPbo6oHgJK4hNGiwimgcsaIhJp_jNiFk6A_LERYrZ2LKNLDgFdUsh1PpWz6P5Yy_PhTl0ofKhYQetZK7a-ko005tBK2xg_riZjIkkZ7YR-rX7_3OAkzkDJMpwUUnKhUd28t4GErgM-D98SbLN4GNjkW6UmvcjvCOimmHdKjywK6fX6-hWr61apJFcb7pldZxs5r4eCZpAPpdOuujNmLLkmDsPod9KD1khNTU_4I-WprGcDwN19xkrwyP7w",
)

WATCH_K8S = os.environ.get("WATCH_K8S", False)
WATCH_K8S_NAMESPACE = os.environ.get("WATCH_K8S_NAMESPACE", "processing")
"""
source: https://github.com/kubernetes-client/python/issues/1148#issuecomment-626184613
kwargs['timeout_seconds'] = 60 is a polite request to the server, asking it to cleanly close the connection after 60 seconds. 
If you have a network outage, this does nothing. You can set this number much higher, maybe to 3600 seconds (1h).

kwargs['_request_timeout'] = 60 is a client-side timeout, configuring your local socket. 
If you have a network outage dropping all packets with no RST/FIN, this is how long your client waits before realizing & dropping the connection. 
You can keep this number low, maybe 60 seconds.
"""
WATCH_K8S_TIMEOUT = os.environ.get("WATCH_K8S_TIMEOUT", 0)
WATCH_K8S_REQUEST_TIMEOUT = os.environ.get("WATCH_K8S_REQUEST_TIMEOUT", 0)

MAX_ACTIVE_K8S_JOBS = os.environ.get("MAX_ACTIVE_K8S_JOBS", 50)

HYDRA_REGISTRY = "registry.mobilizedconstruction.com/mc/hydra/"
PROCESS_BATCH_TEST_IMAGE = HYDRA_REGISTRY + "process-batch-test:latest"

HOUSTON_URL = "https://houston.mobilizedconstruction.com/"
HOUSTON_TOKEN = os.environ.get("HOUSTON_TOKEN")
ROOT_CERT = "/secrets/root-cert"
